{"version":3,"sources":["../src/hash-actions.js"],"names":[],"mappings":"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","file":"hash-actions.js","sourcesContent":["/*! hash-actions v0.1.0 | Kari SÃ¶derholm | https://github.com/Haprog/hash-actions */\nwindow.hashActions = (() => {\n  /**\n   * @type {string[]}\n   * @memberof hashActions\n   * @inner\n   * @private\n   */\n  const registeredHashes = [];\n\n  /**\n   * Used for checking what was the previously active hash (for triggering exit events).\n   * This is read and updated in {@link hashActions._onHashChange}.\n   *\n   * The previous hash could also be read from\n   * [`HashChangeEvent.oldURL`](https://developer.mozilla.org/en-US/docs/Web/API/HashChangeEvent/oldURL)\n   * but that's not supported on IE11 (and should check support on previous Safari versions). This\n   * can probably be dropped in the future when browser support for `HashChangeEvent.oldURL` is\n   * good enough.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/HashChangeEvent/oldURL\n   * @see https://caniuse.com/#feat=mdn-api_hashchangeevent_oldurl\n   *\n   * @type {string[]}\n   * @memberof hashActions\n   * @inner\n   * @private\n   */\n  let oldHash = window.location.hash;\n\n  /**\n   * `window.hashActions`\n   * @global\n   * @namespace\n   */\n  const hashActions = {\n    /**\n     * When set to true, the hash symbol is automatically removed from the current URL whenever\n     * `window.location.hash` is set to empty.\n     *\n     * This is done in a `hashchange` event listener so this will have an effect not only when the\n     * hash is changed using hashActions, but also when any code sets `window.location.hash`.\n     * @type {boolean}\n     */\n    hideEmptyHashFromURL: false,\n\n    /**\n     * Removes the hash/fragment part from the given URL string.\n     * @param {string} url A URL\n     * @return The given URL without the hash/fragment part\n     */\n    removeHashSymbol(url) {\n      return url.split('#')[0];\n    },\n\n    /**\n     * Sets the given hash as the currently active hash.\n     *\n     * Basically this just sets `window.location.hash` unless the given hash is an empty string,\n     * then {@link hashActions.removeHashWithoutReload} will be called.\n     *\n     * @see hashActions.removeHashWithoutReload\n     *\n     * @param {string} hash The hash to set\n     */\n    setHash(hash) {\n      if (hash === '') {\n        this.removeHashWithoutReload();\n      } else {\n        window.location.hash = hash;\n      }\n    },\n\n    /**\n     * Sets the given hash as the currently active hash without scrolling the page.\n     *\n     * Saves the current scroll position before setting the hash and then restores it to prevent\n     * the page from scrolling in case setting the hash would otherwise cause the page to scroll.\n     *\n     * @param {string} hash The hash to set\n     */\n    setHashWithoutScrolling(hash) {\n      const scrollV = document.documentElement.scrollTop;\n      const scrollH = document.documentElement.scrollLeft;\n\n      window.location.hash = hash;\n\n      document.documentElement.scrollTop = scrollV;\n      document.documentElement.scrollLeft = scrollH;\n    },\n\n    /**\n     * Remove the hash from the URL without reloading the page.\n     *\n     * This will use `window.history.replaceState()` on supported browsers to completely remove\n     * the hash symbol `#` from the URL since just setting `window.location.hash` to an empty\n     * string would keep the ugly `#` visible at the end of the URL.\n     *\n     * Will fall back to setting `window.location.hash` on browsers that don't support\n     * `history.replaceState()`. Mainly on very old Android, old iPhone or IE9 and older.\n     *\n     * @param {boolean} triggeredByHashChange Set to true when called from internal logic in\n     *                                        `_onHashChange()`\n     */\n    removeHashWithoutReload(triggeredByHashChange) {\n      const loc = window.location;\n      if ('replaceState' in window.history) {\n        const _oldHash = window.location.hash;\n        window.history.replaceState('', document.title, loc.pathname + loc.search);\n\n        if (_oldHash !== '' && !triggeredByHashChange) {\n          // Trigger the hash change logic in case this method wasn't called by `_onHashChange()`\n          this._onHashChange('');\n        }\n      } else if (loc.hash !== '') {\n        // Fallback for old browsers (this can probably be removed, check browser support)\n        this.setHashWithoutScrolling('');\n      }\n    },\n\n    /**\n     * Check if the given hash matches the currently active hash\n     * @param {string} hash The hash to check\n     * @return {boolean} True if the given hash matches the currently active hash\n     */\n    isCurrentHash(hash) {\n      return window.location.hash === hash;\n    },\n\n    /**\n     * Check if the given hash has been registered\n     * @param {string} hash The hash to check\n     * @return {boolean} True if the given hash has been registered\n     */\n    isRegisteredHash(hash) {\n      return registeredHashes.indexOf(hash) > -1;\n    },\n\n    /**\n     * Check if the currently active hash has been registered\n     * A shorthand for `isRegisteredHash(window.location.hash)`\n     * @return {boolean} True if the currently active hash has been registered\n     */\n    isCurrentRegisteredHash() {\n      return this.isRegisteredHash(window.location.hash);\n    },\n\n    /**\n     * Registers the given hash.\n     * For registered hashes hash-actions will trigger custom hash enter and hash exit events on\n     * `document`.\n     *\n     * `hashactions:enter:<hash>` event will be triggered when the registered hash becomes the\n     * currently active hash.\n     *\n     * `hashactions:exit:<hash>` event will be triggered when the currently active hash is changed\n     * from the registered hash to something else.\n     *\n     * @param {string} hash The hash to register\n     * @param {boolean} triggerOnCurrent If true and if the given hash is currently active,\n     *                                   triggers the hash enter event immediately\n     */\n    registerHash(hash, triggerOnCurrent) {\n      if (this.isRegisteredHash(hash)) return;\n\n      registeredHashes.push(hash);\n\n      if (triggerOnCurrent && this.isCurrentHash(hash)) {\n        this.triggerHashEnter(hash);\n      }\n    },\n\n    /**\n     * Unregisters the given hash.\n     * Custom hash enter and exit events are not triggered for unregistered hashes.\n     * @param {string} hash The hash to unregister\n     */\n    unregisterHash(hash) {\n      const i = registeredHashes.indexOf(hash);\n      if (i > -1) {\n        registeredHashes.splice(i, 1);\n      }\n    },\n\n    /**\n     * Unregisters all hashes.\n     * @private\n     */\n    _clearRegisteredHashes() {\n      registeredHashes.length = 0;\n    },\n\n    /**\n     * Triggers a custom event on the given target.\n     * @private\n     * @param {EventTarget} target The event target to dispatch the event on (e.g. an Element)\n     * @param {string} eventName Name of the custom event to dispatch\n     * @param {object} data The data to include as `event.detail`\n     */\n    _triggerCustomEvent(target, eventName, data) {\n      /** @type {CustomEvent} */\n      let event;\n      if (window.CustomEvent) {\n        event = new CustomEvent(eventName, { detail: data });\n      } else {\n        // IE11 support\n        event = document.createEvent('CustomEvent');\n        event.initCustomEvent(eventName, true, true, data);\n      }\n      target.dispatchEvent(event);\n    },\n\n    /**\n     * Trigger a hash enter event on `document` for the given hash.\n     * `hashactions:enter:<hash>` is the name of the event that will be dispatched.\n     * The event `detail` will include the hash as property `hash`.\n     * @param {string} hash The hash for which to trigger an enter event\n     */\n    triggerHashEnter(hash) {\n      this._triggerCustomEvent(document, `hashactions:enter:${hash}`, { hash });\n    },\n\n    /**\n     * Trigger a hash exit event on `document` for the given hash.\n     * `hashactions:exit:<hash>` is the name of the event that will be dispatched.\n     * The event `detail` will include the hash as property `hash`.\n     * @param {string} hash The hash for which to trigger an exit event\n     */\n    triggerHashExit(hash) {\n      this._triggerCustomEvent(document, `hashactions:exit:${hash}`, { hash });\n    },\n\n    /**\n     * @callback HashEventListener\n     * @param {CustomEvent} event\n     */\n\n    /**\n     * Register an enter listener for the given hash.\n     * Whenever the given hash becomes the active hash, the given callback will be called.\n     *\n     * @example\n     * hashActions.onHashEnter('#contact', () => contactDialog.open(), true);\n     *\n     * @param {string} hash The hash for which to register an enter event listener\n     * @param {HashEventListener} callback The enter event listener\n     * @param {boolean} triggerOnCurrent If true and if the given hash is currently active,\n     *                                   triggers the hash enter event immediately\n     */\n    onHashEnter(hash, callback, triggerOnCurrent) {\n      this.registerHash(hash);\n      document.addEventListener(`hashactions:enter:${hash}`, callback);\n\n      if (triggerOnCurrent && this.isCurrentHash(hash)) {\n        this.triggerHashEnter(hash);\n      }\n    },\n\n    /**\n     * Register an exit listener for the given hash.\n     * Whenever the currently active hash is changed from the given hash to something else, the\n     * given callback will be called.\n     *\n     * @example\n     * hashActions.onHashExit('#contact', () => contactDialog.close());\n     *\n     * @param {string} hash The hash for which to register an exit event listener\n     * @param {HashEventListener} callback The exit event listener\n     */\n    onHashExit(hash, callback) {\n      this.registerHash(hash);\n      document.addEventListener(`hashactions:exit:${hash}`, callback);\n    },\n\n    /**\n     * Options object for the `on()` method to provide enter and exit listeners\n     * @typedef {object} OnListenersHash\n     * @property {HashEventListener} enter The enter event listener\n     * @property {HashEventListener} exit The exit event listener\n     */\n\n    /**\n     * A shorthand for registering both enter and exit listeners for a hash.\n     *\n     * @example\n     * hashActions.on('#contact', {\n     *   enter: () => contactDialog.open(),\n     *   exit: () => contactDialog.close()\n     * }, true);\n     *\n     * @see hashActions.onHashEnter\n     * @see hashActions.onHashExit\n     *\n     * @param {string} hash The hash for which to register event listeners\n     * @param {OnListenersHash} o An object which should have function properties `enter` and\n     *                            `exit` for defining the event listener callbacks\n     * @param {boolean} triggerEnterOnCurrent If true and if the given hash is currently active,\n     *                                        triggers the hash enter event immediately\n     */\n    on(hash, o, triggerEnterOnCurrent) {\n      if (typeof o.exit === 'function') {\n        this.onHashExit(hash, o.exit);\n      }\n      if (typeof o.enter === 'function') {\n        this.onHashEnter(hash, o.enter, triggerEnterOnCurrent);\n      }\n    },\n\n    /**\n     * `hashchange` event handler. Contains the main logic for triggering hash enter and exit event\n     * for registered hashes.\n     *\n     * If `hideEmptyHashFromURL` has been set to true and the new hash is an empty string, then\n     * `removeHashWithoutReload()` will be called.\n     *\n     * @private\n     * @param {string} hash The new hash that has just became the active hash\n     */\n    _onHashChange(hash) {\n      if (hash !== oldHash && this.isRegisteredHash(oldHash)) {\n        this.triggerHashExit(oldHash);\n      }\n      if (this.isRegisteredHash(hash)) {\n        this.triggerHashEnter(hash);\n      }\n      oldHash = hash;\n\n      if (hash === '' && this.hideEmptyHashFromURL) {\n        this.removeHashWithoutReload(true);\n      }\n    },\n  };\n\n  window.addEventListener('hashchange', () => {\n    hashActions._onHashChange(window.location.hash);\n  });\n\n  return hashActions;\n})();\n"]}