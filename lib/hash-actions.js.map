{"version":3,"sources":["../src/hash-actions.js"],"names":[],"mappings":"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","file":"hash-actions.js","sourcesContent":["/*! hash-actions v0.0.4 | Kari SÃ¶derholm | https://github.com/Haprog/hash-actions */\nwindow.hashActions = (() => {\n  const registeredHashes = [];\n  let oldHash = window.location.hash;\n  const hashActions = {\n    hideEmptyHashFromURL: false,\n\n    /**\n     * Removes the hash/fragment part from the given URL string.\n     * @param {string} url A URL\n     * @return The given URL without the hash/fragment part\n     */\n    removeHashSymbol(url) {\n      return url.split('#')[0];\n    },\n\n    /**\n     * Sets the given hash as the currently active hash.\n     *\n     * Basically this just sets `window.location.hash` unless the given hash is an empty string,\n     * then `removeHashWithoutReload()` will be called.\n     *\n     * @see removeHashWithoutReload\n     *\n     * @param {string} hash The hash to set\n     */\n    setHash(hash) {\n      if (hash === '') {\n        this.removeHashWithoutReload();\n      } else {\n        window.location.hash = hash;\n      }\n    },\n\n    /**\n     * Sets the given hash as the currently active hash without scrolling the page.\n     *\n     * Saves the current scroll position before setting the hash and then restores it to prevent\n     * the page from scrolling in case setting the hash would otherwise cause the page to scroll.\n     *\n     * @param {string} hash The hash to set\n     */\n    setHashWithoutScrolling(hash) {\n      const scrollV = document.body.scrollTop;\n      const scrollH = document.body.scrollLeft;\n\n      window.location.hash = hash;\n\n      document.body.scrollTop = scrollV;\n      document.body.scrollLeft = scrollH;\n    },\n\n    /**\n     * Remove the hash from the URL without reloading the page.\n     *\n     * This will use `window.history.replaceState()` on supported browsers to completely remove\n     * the hash symbol `#` from the URL since just setting `window.location.hash` to an empty\n     * string would keep the ugly `#` visible at the end of the URL.\n     *\n     * Will fall back to setting `window.location.hash` on browsers that don't support\n     * `history.replaceState()`. Mainly on very old Android, old iPhone or IE9 and older.\n     *\n     * @param {boolean} triggeredByHashChange Set to true when called from internal logic in\n     *                                        `_onHashChange()`\n     */\n    removeHashWithoutReload(triggeredByHashChange) {\n      const loc = window.location;\n      if ('replaceState' in window.history) {\n        window.history.replaceState('', document.title, loc.pathname + loc.search);\n\n        if (oldHash !== '' && !triggeredByHashChange) {\n          // Trigger the hash change logic in case this method wasn't called by `_onHashChange()`\n          this._onHashChange('');\n        }\n      } else if (loc.hash !== '') {\n        // Fallback for old browsers\n        this.setHashWithoutScrolling('');\n      }\n    },\n\n    /**\n     * Check if the given hash matches the currently active hash\n     * @param {string} hash The hash to check\n     * @return {boolean} True if the given hash matches the currently active hash\n     */\n    isCurrentHash(hash) {\n      return window.location.hash === hash;\n    },\n\n    /**\n     * Check if the given hash has been registered\n     * @param {string} hash The hash to check\n     * @return {boolean} True if the given hash has been registered\n     */\n    isRegisteredHash(hash) {\n      return registeredHashes.indexOf(hash) > -1;\n    },\n\n    /**\n     * Check if the currently active hash has been registered\n     * A shorthand for `isRegisteredHash(window.location.hash)`\n     * @return {boolean} True if the currently active hash has been registered\n     */\n    isCurrentRegisteredHash() {\n      return this.isRegisteredHash(window.location.hash);\n    },\n\n    /**\n     * Registers the given hash.\n     * For registered hashes hash-actions will trigger custom hash enter and hash exit events on\n     * `document`.\n     *\n     * `hashactions:enter:<hash>` event will be triggered when the registered hash becomes the\n     * currently active hash.\n     *\n     * `hashactions:exit:<hash>` event will be triggered when the currently active hash is changed\n     * from the registered hash to something else.\n     *\n     * @param {string} hash The hash to register\n     * @param {boolean} triggerOnCurrent If true and if the given hash is currently active,\n     *                                   triggers the hash enter event immediately\n     */\n    registerHash(hash, triggerOnCurrent) {\n      if (this.isRegisteredHash(hash)) return;\n\n      registeredHashes.push(hash);\n\n      if (triggerOnCurrent && this.isCurrentHash(hash)) {\n        this.triggerHashEnter(hash);\n      }\n    },\n\n    /**\n     * Unregisters the given hash.\n     * Custom hash enter and exit events are not triggered for unregistered hashes.\n     * @param {string} hash The hash to unregister\n     */\n    unregisterHash(hash) {\n      const i = registeredHashes.indexOf(hash);\n      if (i > -1) {\n        registeredHashes.splice(i, 1);\n      }\n    },\n\n    /**\n     * Triggers a custom event on the given target.\n     * @param {EventTarget} target The event target to dispatch the event on (e.g. an Element)\n     * @param {string} eventName Name of the custom event to dispatch\n     * @param {object} data The data to include as `event.detail`\n     */\n    _triggerCustomEvent(target, eventName, data) {\n      let event;\n      if (window.CustomEvent) {\n        event = new CustomEvent(eventName, { detail: data });\n      } else {\n        event = document.createEvent('CustomEvent');\n        event.initCustomEvent(eventName, true, true, data);\n      }\n      target.dispatchEvent(event);\n    },\n\n    /**\n     * Trigger a hash enter event on `document` for the given hash.\n     * `hashactions:enter:<hash>` is the name of the event that will be dispatched.\n     * The event `detail` will include the hash as property `hash`.\n     * @param {string} hash The hash for which to trigger an enter event\n     */\n    triggerHashEnter(hash) {\n      this._triggerCustomEvent(document, `hashactions:enter:${hash}`, { hash });\n    },\n\n    /**\n     * Trigger a hash exit event on `document` for the given hash.\n     * `hashactions:exit:<hash>` is the name of the event that will be dispatched.\n     * The event `detail` will include the hash as property `hash`.\n     * @param {string} hash The hash for which to trigger an exit event\n     */\n    triggerHashExit(hash) {\n      this._triggerCustomEvent(document, `hashactions:exit:${hash}`, { hash });\n    },\n\n    /**\n     * Register an enter listener for the given hash.\n     * Whenever the given hash becomes the active hash, the given callback will be called.\n     * @param {string} hash The hash for which to register an enter event listener\n     * @param {function} callback The enter event listener\n     * @param {boolean} triggerOnCurrent If true and if the given hash is currently active,\n     *                                   triggers the hash enter event immediately\n     */\n    onHashEnter(hash, callback, triggerOnCurrent) {\n      this.registerHash(hash);\n      document.addEventListener(`hashactions:enter:${hash}`, callback);\n\n      if (triggerOnCurrent && this.isCurrentHash(hash)) {\n        this.triggerHashEnter(hash);\n      }\n    },\n\n    /**\n     * Register an exit listener for the given hash.\n     * Whenever the currently active hash is changed from the given hash to something else, the\n     * given callback will be called.\n     * @param {string} hash The hash for which to register an exit event listener\n     * @param {function} callback The exit event listener\n     */\n    onHashExit(hash, callback) {\n      this.registerHash(hash);\n      document.addEventListener(`hashactions:exit:${hash}`, callback);\n    },\n\n    /**\n     * A shorthand for registering both enter and exit listeners for a hash.\n     * @see onHashEnter\n     * @see onHashExit\n     *\n     * @param {string} hash The hash for which to register event listeners\n     * @param {object} o An object which should have function properties `enter` and `exit` for\n     *                   defining the event listener callbacks\n     * @param {boolean} triggerEnterOnCurrent If true and if the given hash is currently active,\n     *                                        triggers the hash enter event immediately\n     */\n    on(hash, o, triggerEnterOnCurrent) {\n      if (typeof o.exit === 'function') {\n        this.onHashExit(hash, o.exit);\n      }\n      if (typeof o.enter === 'function') {\n        this.onHashEnter(hash, o.enter, triggerEnterOnCurrent);\n      }\n    },\n\n    /**\n     * `hashchange` event handler. Contains the main logic for triggering hash enter and exit event\n     * for registered hashes.\n     *\n     * If `hideEmptyHashFromURL` has been set to true and the new hash is an empty string, then\n     * `removeHashWithoutReload()` will be called.\n     *\n     * @param {string} hash The new hash that has just became the active hash\n     */\n    _onHashChange(hash) {\n      if (hash !== oldHash && this.isRegisteredHash(oldHash)) {\n        this.triggerHashExit(oldHash);\n      }\n      if (this.isRegisteredHash(hash)) {\n        this.triggerHashEnter(hash);\n      }\n      oldHash = hash;\n\n      if (hash === '' && this.hideEmptyHashFromURL) {\n        this.removeHashWithoutReload(true);\n      }\n    },\n  };\n\n  window.addEventListener('hashchange', () => {\n    hashActions._onHashChange(window.location.hash);\n  });\n\n  return hashActions;\n})();\n"]}